class Solution {
    int floorSqrt(int n) {
        return (int)Math.sqrt(n);
        
    }
}

//Binary Search 
class Solution {
    long floorSqrt(long n) {
        long low = 1, high = n, ans = 0;

        while (low <= high) {
            long mid = (low + high) / 2;
            
            if (mid * mid == n) {
                return mid; // perfect square
            } else if (mid * mid < n) {
                ans = mid; // store possible floor value
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return ans;
    }
}



//Binary search

class Solution {
    long floorSqrt(long n) {
        long low = 1, high = n, ans = 1;

        while (low <= high) {
            long mid = (low + high) / 2;
            
            if (mid * mid <= n) {
                ans=mid;
                low=mid+1;
            } 
            else{
                high = mid - 1;
            }
        }

        return ans;
    }
}
